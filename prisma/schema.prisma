
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApiProvider {
  openAI
  anthropic
  google
}

enum ApiModel {
  GPT_4o
  GPT_4o_mini
  GPT_4_Turbo
  GPT_4
  GPT_3_5_Turbo
  Claude_3_5_Sonnet
  Claude_3_Opus
  Claude_3_Sonnet
  Claude_3_Haiku
  Gemini_1_5_Pro
  Gemini_1_5_Flash
  Gemini_1_0_Pro
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  name             String
  password_hash    String?
  oauth            String?
  oauth_link_token String?
  stripe_id        String?
  requests         ApiRequest[]
  balance          Balance?

  @@map("users")
}

model Message {
  id                 Int       @id @default(autoincrement())
  prompt             String
  response           String
  pictures           Json?
  referencedMessages Message[] @relation("MessageReferences")
  referencedBy       Message[] @relation("MessageReferences")
  apiRequest         ApiRequest?

  @@map("messages")
}

model ApiRequest {
  id                Int         @id @default(autoincrement())
  user              User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           Int
  api_provider      ApiProvider
  api_model         ApiModel
  request_timestamp DateTime    @default(now())
  input_tokens      Int
  input_cost        Decimal     @db.Decimal(15, 10)
  output_tokens     Int
  output_cost       Decimal     @db.Decimal(15, 10)
  total_cost        Decimal     @db.Decimal(15, 10)
  message           Message?    @relation(fields: [message_id], references: [id])
  message_id        Int?        @unique

  @@map("api_requests")
}

model Balance {
  id      Int   @id @default(autoincrement())
  amount  Float @default(0)
  user    User  @relation(fields: [user_id], references: [id])
  user_id  Int   @unique

  @@map("balances")
}